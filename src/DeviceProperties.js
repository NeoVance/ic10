"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceProperties = void 0;
const Slot_1 = require("./Slot");
class DeviceProperties {
    constructor(scope) {
        this.On = 0;
        this.Power = 0;
        this.Error = 0;
        this.Activate = 0;
        this.Setting = 0;
        this.RequiredPower = 0;
        this.ClearMemory = 0;
        this.Lock = 0;
        this.slots = new Array(10);
        this.RecipeHash = -128473777;
        this.AirRelease = 0;
        this.Bpm = 0;
        this.Charge = 0;
        this.ClearMemory = 0;
        this.CollectableGoods = 0;
        this.Color = 0;
        this.Combustion = 0;
        this.CompletionRatio = 0;
        this.CurrentResearchPodType = 0;
        this.ElevatorLevel = 0;
        this.ElevatorSpeed = 0;
        this.Error = 0;
        this.ExportCount = 0;
        this.Filtration = 0;
        this.ForceWrite = 0;
        this.Fuel = 0;
        this.Harvest = 0;
        this.Horizontal = 0;
        this.HorizontalRatio = 0;
        this.Idle = 0;
        this.ImportCount = 0;
        this.Lock = 0;
        this.ManualResearchRequiredPod = 0;
        this.Maximum = 0;
        this.MineablesInQueue = 0;
        this.MineablesInVicinity = 0;
        this.Mode = 0;
        this.NextWeatherEventTime = 0;
        this.On = 0;
        this.Open = 0;
        this.Output = 0;
        this.Plant = 0;
        this.PositionX = 0;
        this.PositionY = 0;
        this.PositionZ = 0;
        this.Power = 0;
        this.PowerActual = 0;
        this.PowerGeneration = 0;
        this.PowerPotential = 0;
        this.PowerRequired = 0;
        this.PrefabHash = 0;
        this.Pressure = 0;
        this.PressureExternal = 0;
        this.PressureSetting = 0;
        this.Quantity = 0;
        this.Ratio = 0;
        this.RatioCarbonDioxide = 0;
        this.RatioNitrogen = 0;
        this.RatioNitrousOxide = 0;
        this.RatioOxygen = 0;
        this.RatioPollutant = 0;
        this.RatioVolatiles = 0;
        this.RatioWater = 0;
        this.Reagents = 0;
        this.RecipeHash = 0;
        this.RequestHash = 0;
        this.RequiredPower = 0;
        this.ReturnFuelCost = 0;
        this.Setting = 0;
        this.SettingInput = 0;
        this.SettingOutput = 0;
        this.SignalID = 0;
        this.SignalStrength = 0;
        this.SolarAngle = 0;
        this.TargetX = 0;
        this.TargetY = 0;
        this.TargetZ = 0;
        this.Temperature = 0;
        this.TemperatureExternal = 0;
        this.TemperatureSetting = 0;
        this.Time = 0;
        this.TotalMoles = 0;
        this.VelocityMagnitude = 0;
        this.VelocityRelativeX = 0;
        this.VelocityRelativeY = 0;
        this.VelocityRelativeZ = 0;
        this.Vertical = 0;
        this.VerticalRatio = 0;
        this.Volume = 0;
        this.randomize();
        for (let i = 0; i < 10; i++) {
            this.slots[i] = new Slot_1.Slot(scope, i);
        }
    }
    slots;
    Activate;
    AirRelease;
    Bpm;
    Charge;
    ClearMemory;
    CollectableGoods;
    Color;
    Combustion;
    CompletionRatio;
    CurrentResearchPodType;
    ElevatorLevel;
    ElevatorSpeed;
    Error;
    ExportCount;
    Filtration;
    ForceWrite;
    Fuel;
    Harvest;
    Horizontal;
    HorizontalRatio;
    Idle;
    ImportCount;
    Lock;
    ManualResearchRequiredPod;
    Maximum;
    MineablesInQueue;
    MineablesInVicinity;
    Mode;
    NextWeatherEventTime;
    On;
    Open;
    Output;
    Plant;
    PositionX;
    PositionY;
    PositionZ;
    Power;
    PowerActual;
    PowerGeneration;
    PowerPotential;
    PowerRequired;
    PrefabHash;
    Pressure;
    PressureExternal;
    PressureSetting;
    Quantity;
    Ratio;
    RatioCarbonDioxide;
    RatioNitrogen;
    RatioNitrousOxide;
    RatioOxygen;
    RatioPollutant;
    RatioVolatiles;
    RatioWater;
    Reagents;
    RecipeHash;
    RequestHash;
    RequiredPower;
    ReturnFuelCost;
    Setting;
    SettingInput;
    SettingOutput;
    SignalID;
    SignalStrength;
    SolarAngle;
    TargetX;
    TargetY;
    TargetZ;
    Temperature;
    TemperatureExternal;
    TemperatureSetting;
    Time;
    TotalMoles;
    VelocityMagnitude;
    VelocityRelativeX;
    VelocityRelativeY;
    VelocityRelativeZ;
    Vertical;
    VerticalRatio;
    Volume;
    hash = 0;
    randomize() {
        this.ClearMemory = 0;
    }
    get(key) {
        return this[key];
    }
    set(key, value) {
        this[key] = value;
    }
}
exports.DeviceProperties = DeviceProperties;
//# sourceMappingURL=DeviceProperties.js.map